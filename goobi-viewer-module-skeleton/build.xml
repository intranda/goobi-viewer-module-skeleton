<?xml version="1.0"?>

<!-- ADJUST PROJECT NAME, FILENAME AND INCLUDED CLASSES FOR JENKINS IF YOU COPY THIS FILE TO A NEW PROJECT-->

<project name="viewer-module-skeleton" basedir="." default="dist">

	<!-- ================================= 
	        properties             
	     ================================= -->
	<property name="filename" value="viewer-module-skeleton" />
	<property name="stubname" value="viewer-module-stub-skeleton" />
	<property name="dir.build" value="./build" />
	<property name="dir.build.lib" value="./lib" />
	<property name="dir.build.viewerlib" value="/opt/digiverso/viewerlib" />
	<property name="dir.deploy" value="deploy" />
	<property name="dir.javadoc" value="./doc" />
	<property name="dir.src" location="./src" />
	<property name="dir.tests.src" value="./test" />
	<property name="dir.tests.classes" value="${dir.build}/test-classes" />
	<property name="dir.tests.report" value="${dir.build}/test-reports" />

	<!-- Compiler options -->
	<property name="javac.source" value="1.8" />
	<property name="javac.target" value="1.8" />
	<property name="javac.debug" value="true" />

	<!-- Build classpath -->
	<path id="classpath">
		<fileset dir="${dir.build.viewerlib}" />
		<fileset dir="${dir.build.lib}" />
	</path>

	<!-- JUnit test classpath -->
	<path id="test.classpath">
		<path refid="classpath" />
		<pathelement location="${dir.build}" />
		<pathelement location="${dir.tests.classes}" />
	</path>

	<!-- ================================= 
             General targets: clean, createDirs, git.revision
    	     ================================= -->

	<!-- Clean up generated and compiled files. -->
	<target name="clean" description="Clean up generated and compiled files.">
		<echo>Cleaning up workspace...</echo>
		<delete dir="${dir.build}" />
		<delete dir="${dir.deploy}" />
	</target>

	<!-- Create needed directories -->
	<target name="createDirs" depends="clean" description="Create needed directories.">
		<echo>Creating needed directories...</echo>
		<mkdir dir="${dir.build}" />
		<mkdir dir="${dir.tests.classes}" />
		<mkdir dir="${dir.deploy}" />
	</target>

	<!-- Normal build of application. <target name="compile" depends="writeVersion" 
        description="Normal build of application."> -->
	<target name="compile" depends="createDirs" description="Normal build of application.">
		<javac includeantruntime="false" srcdir="${dir.src}" destdir="${dir.build}" source="${javac.source}" target="${javac.target}" encoding="UTF8" debug="${javac.debug}" debuglevel="lines,vars,source">
			<compilerarg value="-Xlint:-path" />
			<compilerarg value="-Xlint:deprecation" />
			<classpath refid="classpath" />
		</javac>
	</target>

	<!-- Compile unit tests -->
	<target name="compile-tests" depends="compile">
		<javac includeantruntime="false" srcdir="${dir.tests.src}" destdir="${dir.tests.classes}" source="${javac.source}" target="${javac.target}" encoding="UTF8" debug="${javac.debug}" debuglevel="lines,vars,source">
			<compilerarg value="-Xlint:-path" />
			<compilerarg value="-Xlint:deprecation" />
			<classpath refid="test.classpath" />
		</javac>
        <copy file="${dir.src}/META-INF/persistence-core.xml" tofile="${dir.build}/META-INF/persistence.xml" overwrite="true" />
        <copy file="${dir.src}/META-INF/persistence-module.xml" tofile="${dir.build}/META-INF/persistence-module.xml" overwrite="true" />
	</target>

	<!-- Run all tests -->
	<target name="junit" depends="compile-tests" description="Run JUnit tests">
		<echo>Running JUnit tests...</echo>
		<mkdir dir="${dir.tests.report}" />
		<junit printsummary="withOutAndErr" haltonerror="true" haltonfailure="true">
			<classpath refid="test.classpath" />
			<formatter type="xml" usefile="true" />
			<batchtest todir="${dir.tests.report}">
				<fileset dir="${dir.tests.classes}" includes="org/goobi/viewer/**/*Test.class" excludes="org/goobi/viewer/**/Abstract*" />
			</batchtest>
		</junit>
		<delete dir="${dir.tests.classes}" />
		<delete file="${dir.build}/META-INF/persistence.xml" />
	</target>

	<!-- Run specific test -->
	<target name="run-test" depends="compile-tests" description="Run specific JUnit test">
		<fail unless="junit.test.name" message="Property not set: junit.test.name" />
		<junit>
			<classpath refid="test.classpath" />
			<formatter type="plain" usefile="false" />
			<test name="${junit.test.name}" haltonfailure="yes" unless="junit.test.methods" />
			<test name="${junit.test.name}" haltonfailure="yes" methods="${junit.test.methods}" if="junit.test.methods" />
			<sysproperty key="log4j.configuration" value="" />
		</junit>
		<delete dir="${dir.tests.classes}" />
	</target>

	<!-- Javadocs -->
	<target name="javadoc">
		<echo>Generating javadoc...</echo>
		<delete dir="${dir.javadoc}" />
		<mkdir dir="${dir.javadoc}" />
		<!-- create javadocs -->
		<javadoc destdir="${dir.javadoc}" sourcepath="${dir.src}" Author="true" version="true" Use="true" noindex="true" Windowtitle="Goobi viewer Javadoc References" Doctitle="Goobi viewer Javadoc References" bottom="Copyright 2013, inranda GmbH" encoding="UTF8">
			<classpath refid="classpath">
			</classpath>
			<tag name="should" description="Generate Test Cases plugin" enabled="false" />
		</javadoc>
	</target>

	<!-- Store git revision in internal variable -->
	<target name="git.revision" description="Store git revision in ${repository.version}">
		<exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
			<arg value="describe" />
			<arg value="--tags" />
			<arg value="--always" />
			<arg value="HEAD" />
		</exec>
		<condition property="repository.version" value="${git.revision}" else="unknown">
			<and>
				<isset property="git.revision" />
				<length string="${git.revision}" trim="yes" length="0" when="greater" />
			</and>
		</condition>
		<echo> Git revision is: ${git.revision}</echo>
	</target>
	
	<target name="copy-resources">
        <copy todir="${dir.build}/META-INF/resources">
            <fileset dir="${dir.src}/META-INF/resources" />
        </copy>
        <copy todir="${dir.build}/META-INF">
            <fileset dir="${dir.src}/META-INF" includes="*.xml" excludes="persistence-core.xml" />
        </copy>
        <copy todir="${dir.build}" includeEmptyDirs="no">
            <fileset dir="${dir.src}">
                <patternset>
                    <include name="**/*.properties" />
                    <include name="**/*.xml" />
                    <exclude name="**/persistence-core.xml" />
                </patternset>
            </fileset>
        </copy>

	</target>
	
	<target name="copy-stub-resources">
        <copy todir="${dir.build}/META-INF">
        	<fileset dir="${dir.src}/META-INF">
                <patternset>
                    <include name="**/pretty-*.xml" />
                	<include name="**/persistence-module.xml" />
                </patternset>
        	</fileset>
        </copy>
	</target>

	<!-- copy all files to final places -->
	<target name="jar-with-revision" depends="compile, javadoc, git.revision, copy-resources">
		<jar destfile="${dir.deploy}/${filename}-${git.revision}.jar">
			<manifest>
				<attribute name="Class-Path" value="${libs.project}" />
			</manifest>
			<zipfileset dir="${dir.build}/">
				<exclude name="test-classes/**"/>
				<exclude name="test-reports/**"/>
			</zipfileset>
		</jar>
		<echo> Cleaning up build dir...</echo>
		<delete dir="${dir.build}" />
	</target>
	
    <!-- copy all files to final places -->
    <target name="jar" depends="compile, javadoc, copy-resources">
        <jar destfile="${dir.deploy}/${filename}.jar">
            <manifest>
                <attribute name="Class-Path" value="${libs.project}" />
            </manifest>
            <zipfileset dir="${dir.build}/">
            	<exclude name="test-classes/**"/>
                <exclude name="test-reports/**"/>
            </zipfileset>
        </jar>
        <echo> Cleaning up build dir...</echo>
        <delete dir="${dir.build}" />
    </target>
    
    <!-- Create a JAR with only persistence-module.xml included -->
    <target name="stub" description="JAR containing only persistence-module.xml to be added to the viewer core during development."
	   depends="createDirs, copy-stub-resources">
        <jar destfile="${dir.deploy}/${stubname}.jar">
            <manifest>
                <attribute name="Class-Path" value="${libs.project}" />
            </manifest>
            <zipfileset dir="${dir.build}/">
            	<exclude name="test-classes/**"/>
                <exclude name="test-reports/**"/>
            </zipfileset>
        </jar>
        <echo> Cleaning up build dir...</echo>
        <delete dir="${dir.build}" />
    </target>

	<!-- Run all targets in appropiate order for clean compile-->
	<target name="dist" depends="jar-with-revision" description="Creating everything for Jenkins." />

</project>
